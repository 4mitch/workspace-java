package br.com.icarros.gilson.formulaone.entity;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import br.com.icarros.gilson.formulaone.model.Result;
import br.com.icarros.gilson.formulaone.utils.StringHelpders;

@Document(collection = "result")
public class ResultDocument {
	@Id
	private String id;
	private String number;
	private String position;
	private String positionText;
	private String points;
	private DriverDocument driver;
	private ConstructorDocument constructor;
	private String grid;
	private String laps;
	private String status;
	private TimeResulDocument time;
	private FastestLapDocument fastestLap;

	public ResultDocument() {
	}
	
	public ResultDocument(String number, String position, String positionText, String points, DriverDocument driver,
			ConstructorDocument constructor, String grid, String laps, String status, TimeResulDocument time,
			FastestLapDocument fastestLap) {
		this.number = number;
		this.position = position;
		this.positionText = positionText;
		this.points = points;
		this.driver = driver;
		this.constructor = constructor;
		this.grid = grid;
		this.laps = laps;
		this.status = status;
		this.time = time;
		this.fastestLap = fastestLap;
	}
	
	public String getId() {
		return id;
	}
	public String getNumber() {
		return number;
	}
	public String getPosition() {
		return position;
	}
	public String getPositionText() {
		return positionText;
	}
	public String getPoints() {
		return points;
	}
	public DriverDocument getDriver() {
		return driver;
	}
	public ConstructorDocument getConstructor() {
		return constructor;
	}
	public String getGrid() {
		return grid;
	}
	public String getLaps() {
		return laps;
	}
	public String getStatus() {
		return status;
	}
	public TimeResulDocument getTime() {
		return time;
	}
	public FastestLapDocument getFastestLap() {
		return fastestLap;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ResultDocument other = (ResultDocument) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}
	
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ResultDocument {\n");

		sb.append("    number: ").append(StringHelpders.toIndentedString(number)).append("\n");
		sb.append("    position: ").append(StringHelpders.toIndentedString(position)).append("\n");
		sb.append("    positionText: ").append(StringHelpders.toIndentedString(positionText)).append("\n");
		sb.append("    points: ").append(StringHelpders.toIndentedString(points)).append("\n");
		sb.append("    driver: ").append(StringHelpders.toIndentedString(driver.toString())).append("\n");
		sb.append("    constructor: ").append(StringHelpders.toIndentedString(constructor.toString())).append("\n");
		sb.append("    grid: ").append(StringHelpders.toIndentedString(grid)).append("\n");
		sb.append("    laps: ").append(StringHelpders.toIndentedString(laps)).append("\n");
		sb.append("    status: ").append(StringHelpders.toIndentedString(status)).append("\n");
		sb.append("    time: ").append(StringHelpders.toIndentedString(time.toString())).append("\n");
		sb.append("    fastestLap: ").append(StringHelpders.toIndentedString(fastestLap.toString())).append("\n");
		sb.append("}");
		return sb.toString();
	}
	public static ResultDocument toResult(Result result) {
		try {
			String _number = result.getNumber();
			String _position = result.getPosition(); 
			String _positionText = result.getPositionText();
			String _points = result.getPoints();
			String _grid = result.getGrid();
			String _laps = result.getLaps();
			String _status = result.getStatus();
			
			DriverDocument _driver = result;
			ConstructorDocument _constructor = result; 
			TimeResulDocument _time = result;
			FastestLapDocument _fastestLap = result;
			
			return new ResultDocument(_number, _position, _positionText, _points, _driver,_constructor, _grid, _laps, _status, _time,
					_fastestLap);
		} catch (Exception e) {
			return null;
		}
	}
}
