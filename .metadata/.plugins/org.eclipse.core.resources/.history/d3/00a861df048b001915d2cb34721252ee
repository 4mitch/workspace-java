package br.com.icarros.gilson.formulaone.entity;

import java.util.ArrayList;
import java.util.List;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import br.com.icarros.gilson.formulaone.model.Race;
import br.com.icarros.gilson.formulaone.utils.StringHelpders;

@Document(collection = "document")
public class RaceDocument {
	@Id
	private String id;
	private String season;
	private String round;
	private String url;
	private String raceName;
	private CircuitDocument circuit;
	private String date;
	private String time;
	private List<ResultDocument> results;

	public RaceDocument() {
	}

	public RaceDocument(String season, String round, String url, String raceName, CircuitDocument circuit, String date,
			String time, List<ResultDocument> results) {
		this.season = season;
		this.round = round;
		this.url = url;
		this.raceName = raceName;
		this.circuit = circuit;
		this.date = date;
		this.time = time;
		this.results = results;
	}

	public String getId() {
		return id;
	}

	public String getSeason() {
		return season;
	}

	public String getRound() {
		return round;
	}

	public String getUrl() {
		return url;
	}

	public String getRaceName() {
		return raceName;
	}

	public CircuitDocument getCircuit() {
		return circuit;
	}

	public String getDate() {
		return date;
	}

	public String getTime() {
		return time;
	}

	public List<ResultDocument> getResults() {
		return results;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		RaceDocument other = (RaceDocument) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Race {\n");

		sb.append("    season: ").append(StringHelpders.toIndentedString(season)).append("\n");
		sb.append("    round: ").append(StringHelpders.toIndentedString(round)).append("\n");
		sb.append("    url: ").append(StringHelpders.toIndentedString(url)).append("\n");
		sb.append("    raceName: ").append(StringHelpders.toIndentedString(raceName)).append("\n");
		sb.append("    circuit: ").append(StringHelpders.toIndentedString(circuit.toString())).append("\n");
		sb.append("    date: ").append(StringHelpders.toIndentedString(date)).append("\n");
		sb.append("    time: ").append(StringHelpders.toIndentedString(time)).append("\n");
		sb.append("    results: ");
		results.forEach(item -> {
			sb.append(item.toString()).append("\n");
		});
		sb.append("}");
		return sb.toString();
	}

	public static RaceDocument toRace(Race race) {
		try {
			if (race != null) {
				String _season = race.getSeason();
				String _round = race.getRound();
				String _url = race.getUrl();
				String _raceName = race.getRaceName();
				String _date = race.getDate();
				String _time = race.getTime();

				CircuitDocument _circuit = CircuitDocument.toCircuit(race.getCircuit());
				final List<ResultDocument> _results = race.getResults() != null && race.getResults().size() > 0
						? new ArrayList<>()
						: null;
				race.getResults().forEach(item -> {

				});

				return new RaceDocument(_season, _round, _url, _raceName, _circuit, _date, _time, _results);
			} else {
				return null;
			}
		} catch (Exception e) {
			return null;
		}
	}
}
